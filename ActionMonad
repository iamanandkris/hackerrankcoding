package aia.persistence.monadlearn

import aia.persistence.monadlearn.FAction.{IntOutcome, StringOutcome}

/**
  * Created by anand on 27/10/16.
  */
object FAction{
  sealed trait Outcome[+A]
  case class StringOutcome(val v:String) extends Outcome[String]
  case class IntOutcome(val v:Int) extends Outcome[Int]
}

trait FAction[+A] {
  val id:Int
  def compute:A
  def map[B] (f:A=>B):FAction[B]
  def flatMap[B](f:A=>FAction[B]):FAction[B]
}

case class StringAction[+A](val str:String) extends FAction[StringOutcome] {
  override val id: Int = 1
  override def compute ={
    if (str=="Anand") StringOutcome("Anand")
    else if (str == "Nathan") StringOutcome("Nathan")
    else StringOutcome("Marek")
  }

  override def flatMap[B](f: (StringOutcome) => FAction[B]): FAction[B] = f(compute)

  override def map[B](f: (StringOutcome) => B): FAction[B] = {
    FinalAction(compute)
  }
}

case class IntAction[+A](val str:Int) extends FAction[IntOutcome] {
  override val id: Int = 1
  override def compute ={
    if (str==1) IntOutcome(1)
    else if (str == 2) IntOutcome(2)
    else IntOutcome(3)
  }

  override def flatMap[B](f: (IntOutcome) => FAction[B]): FAction[B] = f(compute)

  override def map[B](f: (IntOutcome) => B): FAction[B] = {
    FinalAction(compute)
  }
}

case class FinalAction[+T](val k:T) extends FAction[Nothing] {
  override def map[R]( f : Nothing => R ) : FAction[Nothing] = this
  override def flatMap[B](f: (Nothing) => FAction[B]): FAction[Nothing] = this
  override val id: Int = Int.MaxValue
  override def compute: Nothing = throw new Exception("abc")
}

object test extends App{

  val k = StringAction("Nathan")
  //val f = k.map(x=>x)
  //println(f)

  val fff= k.flatMap(x => x match{
    case StringOutcome("Marek") => IntAction(1).map(x=>x)
    case StringOutcome("Anand") => IntAction(2).map(x=>x)
    case StringOutcome("Nathan") => IntAction(3).map(x=>x)
  } )

  println(fff)
}
